name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude combinations that don't make sense
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build CLI binary
      working-directory: ./golang
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p ../dist
        BINARY_NAME="curseforge-autoupdate-cli-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o "../dist/${BINARY_NAME}" ./cmd/cli

    - name: Build Web binary
      working-directory: ./golang
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="curseforge-autoupdate-web-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o "../dist/${BINARY_NAME}" ./cmd/web

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/*

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build dependencies
      working-directory: ./python
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine

    - name: Build package
      working-directory: ./python
      run: python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: python/dist/*

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-go, build-python]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        files: release-assets/*
        generate_release_notes: true
        body: |
          ## What's Changed
          
          This release includes both Go and Python implementations of the CurseForge Auto-Updater.
          
          ### Go Binaries
          - CLI tool for command-line usage
          - Web interface for browser-based management
          - Available for Linux, Windows, and macOS
          
          ### Python Package
          - Available as a Python package
          - Can be installed via pip from the release assets
          
          ### Installation
          
          **Go Binaries:**
          1. Download the appropriate binary for your OS/architecture
          2. Make it executable (Linux/macOS): `chmod +x curseforge-autoupdate-*`
          3. Run: `./curseforge-autoupdate-cli` or `./curseforge-autoupdate-web`
          
          **Python Package:**
          1. Download the `.whl` file
          2. Install: `pip install curseforge_autoupdate-*.whl`
          3. Run: `python -m updater.main`
          
          Full changelog: https://github.com/${{ github.repository }}/compare/...HEAD